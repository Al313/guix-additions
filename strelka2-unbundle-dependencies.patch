diff -crB strelka-2.8.4.release_src/CMakeLists.txt strelka-2.8.4.release_patched/CMakeLists.txt
*** strelka-2.8.4.release_src/CMakeLists.txt	2017-10-23 21:18:35.000000000 +0200
--- strelka-2.8.4.release_patched/CMakeLists.txt	2018-01-24 16:13:42.240560276 +0100
***************
*** 35,41 ****
  
  
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
- enable_testing()
  
  
  # paths:
--- 35,40 ----
diff -crB strelka-2.8.4.release_src/src/c++/CMakeLists.txt strelka-2.8.4.release_patched/src/c++/CMakeLists.txt
*** strelka-2.8.4.release_src/src/c++/CMakeLists.txt	2017-10-23 21:18:35.000000000 +0200
--- strelka-2.8.4.release_patched/src/c++/CMakeLists.txt	2018-01-18 16:15:51.863723178 +0100
***************
*** 33,39 ****
  set (THIS_CXX_EXECUTABLE_CMAKE "${THIS_MODULE_DIR}/cxxExecutable.cmake")
  set (THIS_CXX_LIBRARY_CMAKE "${THIS_MODULE_DIR}/cxxLibrary.cmake")
  set (THIS_CXX_CONFIGURE_CMAKE "${THIS_MODULE_DIR}/cxxConfigure.cmake")
- set (THIS_CXX_TEST_LIBRARY_CMAKE "${THIS_MODULE_DIR}/cxxTestLibrary.cmake")
  
  include ("${THIS_CXX_CONFIGURE_CMAKE}")
  
--- 33,38 ----
Only in strelka-2.8.4.release_src/src/c++/lib/alignment/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/applications/starling/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/applications/strelka/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/assembly/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/blt_common/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/blt_util/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/htsapi/test: CMakeLists.txt
Only in strelka-2.8.4.release_src/src/c++/lib/starling_common/test: CMakeLists.txt
diff -crB strelka-2.8.4.release_src/src/cmake/boost.cmake strelka-2.8.4.release_patched/src/cmake/boost.cmake
*** strelka-2.8.4.release_src/src/cmake/boost.cmake	2018-01-24 14:26:42.441471836 +0100
--- strelka-2.8.4.release_patched/src/cmake/boost.cmake	2018-01-24 14:26:30.769291186 +0100
***************
*** 44,50 ****
      # for test, so we need two lists now:
      set (THIS_BOOST_BUILD_COMPONENTS filesystem program_options serialization
                                       system timer chrono test)
!     set (Boost_USE_STATIC_LIBS ON)
      if (NOT WIN32)
          # bjam on windows ignores this setting so skip for win32:
          set (Boost_USE_MULTITHREADED OFF)
--- 44,50 ----
      # for test, so we need two lists now:
      set (THIS_BOOST_BUILD_COMPONENTS filesystem program_options serialization
                                       system timer chrono test)
!     set (Boost_USE_STATIC_LIBS OFF)
      if (NOT WIN32)
          # bjam on windows ignores this setting so skip for win32:
          set (Boost_USE_MULTITHREADED OFF)
***************
*** 90,96 ****
  initBoostParams()
  
  if (THIS_FORCE_STATIC_LINK)
!     set(Boost_USE_STATIC_LIBS ON)
  endif ()
  
  set(BOOST_BOOTSTRAP_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/bootstrap/boost)
--- 90,96 ----
  initBoostParams()
  
  if (THIS_FORCE_STATIC_LINK)
!     set(Boost_USE_STATIC_LIBS OFF)
  endif ()
  
  set(BOOST_BOOTSTRAP_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/bootstrap/boost)
diff -crB strelka-2.8.4.release_src/src/cmake/cxxConfigure.cmake strelka-2.8.4.release_patched/src/cmake/cxxConfigure.cmake
*** strelka-2.8.4.release_src/src/cmake/cxxConfigure.cmake	2017-10-23 21:18:35.000000000 +0200
--- strelka-2.8.4.release_patched/src/cmake/cxxConfigure.cmake	2018-01-24 17:05:51.738582428 +0100
***************
*** 52,75 ****
      message(FATAL_ERROR "Detected different C and C++ compiler ids, which could lead to link errors. Compiler id for C is ${CMAKE_C_COMPILER_ID}, but for C++ is ${CMAKE_CXX_COMPILER_ID}. Please set CC and CXX to the C and C++ front ends of the same compiler installation.")
  endif ()
  
- # Support for static linking
- # Note that this implies that all libraries must be found with the
- # exact file name (libXXX.a or libXXX.so)
- #if    (THIS_FORCE_STATIC_LINK)
- #    message(STATUS "All libraries will be statically linked")
- #    set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "-static")
- #    set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "-static")
-     # ensure that even if cmake decides to allow for dynamic libs resolution,
-     # this gets overriden into static...
- #    set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS ${CMAKE_EXE_LINK_STATIC_CXX_FLAGS})
- #    set(THIS_LIBRARY_PREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})
- #    set(THIS_LIBRARY_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})
-     # set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
- #else  ()
- #    set(THIS_LIBRARY_PREFIX "")
- #    set(THIS_LIBRARY_SUFFIX "")
- #endif ()
- 
  # required support for librt to allow boost chrono
  if (UNIX AND NOT APPLE)
      set  (THIS_ADDITIONAL_LIB ${THIS_ADDITIONAL_LIB} rt)
--- 52,57 ----
***************
*** 110,119 ****
      message (STATUS "No ccache found")
  endif()
  
- 
- # Force static linking
- set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
- 
  function(get_compiler_name_version compiler_name compiler_version)
      execute_process(COMMAND ${compiler_name} -dumpversion OUTPUT_VARIABLE this_version)
      STRING(REGEX REPLACE "(\r?\n)+$" "" this_version "${this_version}")
--- 92,97 ----
***************
*** 199,221 ****
  # set compile flags
  #
  
  
  ##
  ## set static linking of standard libraries for binary redistribution:
  ##
  set (IS_STANDARD_STATIC FALSE)
- if     (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
-     if (NOT (${COMPILER_VERSION} VERSION_LESS "4.5"))
-         set (IS_STANDARD_STATIC TRUE)
-     endif ()
- elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
-     set (IS_STANDARD_STATIC TRUE)
- endif ()
- 
- if (${IS_STANDARD_STATIC})
-     append_args (CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
- endif ()
- 
  
  ##
  ## set bug workarounds:
--- 177,191 ----
  # set compile flags
  #
  
+ ##
+ ## Add flags for non-static Boost linking.
+ ##
+ add_definitions(-DBOOST_ALL_NO_LIB -DBOOST_ALL_DYN_LINK -DBOOST_LOG_DYN_LINK)
  
  ##
  ## set static linking of standard libraries for binary redistribution:
  ##
  set (IS_STANDARD_STATIC FALSE)
  
  ##
  ## set bug workarounds:
***************
*** 416,421 ****
--- 386,406 ----
  
  append_args (CMAKE_CXX_FLAGS "${CXX_WARN_FLAGS}")
  
+ ##
+ ## Add libraries that were unbundled.
+ ##
+ append_args (CMAKE_CXX_FLAGS "-llzma")
+ append_args (CMAKE_CXX_FLAGS "-lcurl")
+ append_args (CMAKE_CXX_FLAGS "-lbz2")
+ append_args (CMAKE_CXX_FLAGS "-lssl")
+ append_args (CMAKE_CXX_FLAGS "-lcrypto")
+ 
+ append_args (CMAKE_C_FLAGS "-llzma")
+ append_args (CMAKE_C_FLAGS "-lcurl")
+ append_args (CMAKE_C_FLAGS "-lbz2")
+ append_args (CMAKE_C_FLAGS "-lssl")
+ append_args (CMAKE_C_FLAGS "-lcrypto")
+ 
  #
  # other customizations
  #
diff -crB strelka-2.8.4.release_src/src/cmake/cxxLibrary.cmake strelka-2.8.4.release_patched/src/cmake/cxxLibrary.cmake
*** strelka-2.8.4.release_src/src/cmake/cxxLibrary.cmake	2017-10-23 21:18:35.000000000 +0200
--- strelka-2.8.4.release_patched/src/cmake/cxxLibrary.cmake	2018-01-18 16:32:26.129906721 +0100
***************
*** 59,76 ****
  
  if (THIS_LIBRARY_SOURCES)
      set (LIB_TARGET_NAME "${THIS_PROJECT_NAME}_${CURRENT_DIR_NAME}")
!     add_library     (${LIB_TARGET_NAME} STATIC ${THIS_LIBRARY_SOURCES})
      add_dependencies(${LIB_TARGET_NAME} ${THIS_OPT})
  
      # make the target project use folders when applying cmake IDE generators like Visual Studio
      file(RELATIVE_PATH THIS_RELATIVE_LIBDIR "${THIS_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
      set_property(TARGET ${LIB_TARGET_NAME} PROPERTY FOLDER "${THIS_RELATIVE_LIBDIR}")
  endif()
- 
- ##
- ## build the unit tests if a "test" subdirectory is found:
- ##
- if (IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/test")
-     message (STATUS "Adding c++ test subdirectory:    ${CURRENT_DIR_NAME}/test")
-     add_subdirectory (test)
- endif ()
--- 59,68 ----
  
  if (THIS_LIBRARY_SOURCES)
      set (LIB_TARGET_NAME "${THIS_PROJECT_NAME}_${CURRENT_DIR_NAME}")
!     add_library     (${LIB_TARGET_NAME} SHARED ${THIS_LIBRARY_SOURCES})
      add_dependencies(${LIB_TARGET_NAME} ${THIS_OPT})
  
      # make the target project use folders when applying cmake IDE generators like Visual Studio
      file(RELATIVE_PATH THIS_RELATIVE_LIBDIR "${THIS_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
      set_property(TARGET ${LIB_TARGET_NAME} PROPERTY FOLDER "${THIS_RELATIVE_LIBDIR}")
  endif()
diff -crB strelka-2.8.4.release_src/src/CMakeLists.txt strelka-2.8.4.release_patched/src/CMakeLists.txt
*** strelka-2.8.4.release_src/src/CMakeLists.txt	2017-10-23 21:18:35.000000000 +0200
--- strelka-2.8.4.release_patched/src/CMakeLists.txt	2018-01-18 16:07:13.416654479 +0100
***************
*** 28,39 ****
  
  # force unit tests at compile time, and set them to be more verbose than
  # cmake's default "test" target:
- set(THIS_UNITTESTS "${THIS_PROJECT_NAME}_unittests")
- set(utest_cmd ${CMAKE_CTEST_COMMAND} --force-new-ctest-process --output-on-failure)
- add_custom_target(${THIS_UNITTESTS}
-     ALL
-     COMMAND ${utest_cmd}
-     )
  
  add_subdirectory (c++)
  add_subdirectory (python)
--- 28,33 ----
